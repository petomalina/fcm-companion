// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// PutInstance either adds or patches a unique instance_id within the system with the
	// provided token, ref, and labels.
	// In case of patch, only fields present in the request will be rewritten.
	// Labels are rewritten if present - send the full map in case of patching.
	PutInstance(ctx context.Context, in *AppInstance, opts ...grpc.CallOption) (*empty.Empty, error)
	// RemoveToken removes the token from an existing instance in the system.
	// This disables all notifications sent to the user and will result in warnings in logs.
	// The instance token can be re-registered using PutInstance
	RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RemoveInstance removes the whole instance from the system. Use this in case the application
	// deleted the previous instance. This method is also usable if you want to force-remove the instance
	// from your system (e.g. during account deletion)
	// see https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId#deleteInstanceId()
	RemoveInstance(ctx context.Context, in *RemoveInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Send sends a single notification with its data either to a token, topic, or a condition (e.g. more topics)
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.Send
	// This is a Pub/Sub optimized endpoint
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SendAll sends multiple notificaitons to different defined tokens, topics, or conditions
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.SendAll
	// This is a Pub/Sub optimized endpoint
	SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SendMulticast sends the same notification to multiple token targets
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.SendMulticast
	// This is a Pub/Sub optimized endpoint
	SendMulticast(ctx context.Context, in *SendMulticastRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ListNotifications returns list of notifications with a paging token
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*NotificationList, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) PutInstance(ctx context.Context, in *AppInstance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/PutInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RemoveInstance(ctx context.Context, in *RemoveInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/RemoveInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendAll(ctx context.Context, in *SendAllRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/SendAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendMulticast(ctx context.Context, in *SendMulticastRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/SendMulticast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/fcmcompanion.v1.NotificationService/ListNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	// PutInstance either adds or patches a unique instance_id within the system with the
	// provided token, ref, and labels.
	// In case of patch, only fields present in the request will be rewritten.
	// Labels are rewritten if present - send the full map in case of patching.
	PutInstance(context.Context, *AppInstance) (*empty.Empty, error)
	// RemoveToken removes the token from an existing instance in the system.
	// This disables all notifications sent to the user and will result in warnings in logs.
	// The instance token can be re-registered using PutInstance
	RemoveToken(context.Context, *RemoveTokenRequest) (*empty.Empty, error)
	// RemoveInstance removes the whole instance from the system. Use this in case the application
	// deleted the previous instance. This method is also usable if you want to force-remove the instance
	// from your system (e.g. during account deletion)
	// see https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId#deleteInstanceId()
	RemoveInstance(context.Context, *RemoveInstanceRequest) (*empty.Empty, error)
	// Send sends a single notification with its data either to a token, topic, or a condition (e.g. more topics)
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.Send
	// This is a Pub/Sub optimized endpoint
	Send(context.Context, *SendRequest) (*empty.Empty, error)
	// SendAll sends multiple notificaitons to different defined tokens, topics, or conditions
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.SendAll
	// This is a Pub/Sub optimized endpoint
	SendAll(context.Context, *SendAllRequest) (*empty.Empty, error)
	// SendMulticast sends the same notification to multiple token targets
	// see https://pkg.go.dev/firebase.google.com/go/messaging#Client.SendMulticast
	// This is a Pub/Sub optimized endpoint
	SendMulticast(context.Context, *SendMulticastRequest) (*empty.Empty, error)
	// ListNotifications returns list of notifications with a paging token
	ListNotifications(context.Context, *ListNotificationsRequest) (*NotificationList, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) PutInstance(context.Context, *AppInstance) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutInstance not implemented")
}
func (UnimplementedNotificationServiceServer) RemoveToken(context.Context, *RemoveTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (UnimplementedNotificationServiceServer) RemoveInstance(context.Context, *RemoveInstanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstance not implemented")
}
func (UnimplementedNotificationServiceServer) Send(context.Context, *SendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNotificationServiceServer) SendAll(context.Context, *SendAllRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedNotificationServiceServer) SendMulticast(context.Context, *SendMulticastRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMulticast not implemented")
}
func (UnimplementedNotificationServiceServer) ListNotifications(context.Context, *ListNotificationsRequest) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_PutInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).PutInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/PutInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).PutInstance(ctx, req.(*AppInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RemoveToken(ctx, req.(*RemoveTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RemoveInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RemoveInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/RemoveInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RemoveInstance(ctx, req.(*RemoveInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/SendAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendAll(ctx, req.(*SendAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendMulticast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendMulticast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/SendMulticast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendMulticast(ctx, req.(*SendMulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fcmcompanion.v1.NotificationService/ListNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fcmcompanion.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutInstance",
			Handler:    _NotificationService_PutInstance_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _NotificationService_RemoveToken_Handler,
		},
		{
			MethodName: "RemoveInstance",
			Handler:    _NotificationService_RemoveInstance_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _NotificationService_Send_Handler,
		},
		{
			MethodName: "SendAll",
			Handler:    _NotificationService_SendAll_Handler,
		},
		{
			MethodName: "SendMulticast",
			Handler:    _NotificationService_SendMulticast_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _NotificationService_ListNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/notification.proto",
}
