// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/notification.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _notification_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AppInstance with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AppInstance) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetInstanceId()) < 8 {
		return AppInstanceValidationError{
			field:  "InstanceId",
			reason: "value length must be at least 8 runes",
		}
	}

	// no validation rules for Token

	// no validation rules for Ref

	// no validation rules for Labels

	return nil
}

// AppInstanceValidationError is the validation error returned by
// AppInstance.Validate if the designated constraints aren't met.
type AppInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstanceValidationError) ErrorName() string { return "AppInstanceValidationError" }

// Error satisfies the builtin error interface
func (e AppInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstanceValidationError{}

// Validate checks the field values on RemoveTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceId

	return nil
}

// RemoveTokenRequestValidationError is the validation error returned by
// RemoveTokenRequest.Validate if the designated constraints aren't met.
type RemoveTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTokenRequestValidationError) ErrorName() string {
	return "RemoveTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTokenRequestValidationError{}

// Validate checks the field values on RemoveInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceId

	return nil
}

// RemoveInstanceRequestValidationError is the validation error returned by
// RemoveInstanceRequest.Validate if the designated constraints aren't met.
type RemoveInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveInstanceRequestValidationError) ErrorName() string {
	return "RemoveInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveInstanceRequestValidationError{}

// Validate checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SendRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendRequestValidationError is the validation error returned by
// SendRequest.Validate if the designated constraints aren't met.
type SendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestValidationError) ErrorName() string { return "SendRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestValidationError{}

// Validate checks the field values on SendAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SendAllRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendAllRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SendAllRequestValidationError is the validation error returned by
// SendAllRequest.Validate if the designated constraints aren't met.
type SendAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAllRequestValidationError) ErrorName() string { return "SendAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAllRequestValidationError{}

// Validate checks the field values on SendMulticastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMulticastRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMulticastRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendMulticastRequestValidationError is the validation error returned by
// SendMulticastRequest.Validate if the designated constraints aren't met.
type SendMulticastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMulticastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMulticastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMulticastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMulticastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMulticastRequestValidationError) ErrorName() string {
	return "SendMulticastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMulticastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMulticastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMulticastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMulticastRequestValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TemplateId

	// no validation rules for TemplateData

	// no validation rules for Data

	// no validation rules for Token

	// no validation rules for Topic

	// no validation rules for Condition

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on MulticastMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MulticastMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TemplateId

	// no validation rules for TemplateData

	// no validation rules for Data

	return nil
}

// MulticastMessageValidationError is the validation error returned by
// MulticastMessage.Validate if the designated constraints aren't met.
type MulticastMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MulticastMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MulticastMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MulticastMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MulticastMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MulticastMessageValidationError) ErrorName() string { return "MulticastMessageValidationError" }

// Error satisfies the builtin error interface
func (e MulticastMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMulticastMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MulticastMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MulticastMessageValidationError{}

// Validate checks the field values on ListNotificationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNotificationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	return nil
}

// ListNotificationsRequestValidationError is the validation error returned by
// ListNotificationsRequest.Validate if the designated constraints aren't met.
type ListNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationsRequestValidationError) ErrorName() string {
	return "ListNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationsRequestValidationError{}

// Validate checks the field values on NotificationList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NotificationList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationListValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	return nil
}

// NotificationListValidationError is the validation error returned by
// NotificationList.Validate if the designated constraints aren't met.
type NotificationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationListValidationError) ErrorName() string { return "NotificationListValidationError" }

// Error satisfies the builtin error interface
func (e NotificationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationListValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Notification) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on NotificationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationConfig) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationConfigValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NotificationConfigValidationError is the validation error returned by
// NotificationConfig.Validate if the designated constraints aren't met.
type NotificationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationConfigValidationError) ErrorName() string {
	return "NotificationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationConfigValidationError{}

// Validate checks the field values on MessageTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MessageTemplate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	for key, val := range m.GetMessage() {
		_ = val

		// no validation rules for Message[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageTemplateValidationError{
					field:  fmt.Sprintf("Message[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MessageTemplateValidationError is the validation error returned by
// MessageTemplate.Validate if the designated constraints aren't met.
type MessageTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageTemplateValidationError) ErrorName() string { return "MessageTemplateValidationError" }

// Error satisfies the builtin error interface
func (e MessageTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageTemplateValidationError{}

// Validate checks the field values on FCMMessage with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCMMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMMessageValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAndroid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMMessageValidationError{
				field:  "Android",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWebpush()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMMessageValidationError{
				field:  "Webpush",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApns()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMMessageValidationError{
				field:  "Apns",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFcmOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMMessageValidationError{
				field:  "FcmOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	// no validation rules for Topic

	// no validation rules for Condition

	return nil
}

// FCMMessageValidationError is the validation error returned by
// FCMMessage.Validate if the designated constraints aren't met.
type FCMMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMMessageValidationError) ErrorName() string { return "FCMMessageValidationError" }

// Error satisfies the builtin error interface
func (e FCMMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMMessageValidationError{}

// Validate checks the field values on FCMNotification with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FCMNotification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for ImageUrl

	return nil
}

// FCMNotificationValidationError is the validation error returned by
// FCMNotification.Validate if the designated constraints aren't met.
type FCMNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMNotificationValidationError) ErrorName() string { return "FCMNotificationValidationError" }

// Error satisfies the builtin error interface
func (e FCMNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMNotificationValidationError{}

// Validate checks the field values on FCMAndroid with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCMAndroid) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CollapseKey

	// no validation rules for Priority

	if v, ok := interface{}(m.GetTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMAndroidValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RestrictedPackageName

	// no validation rules for Data

	if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMAndroidValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFcmOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FCMAndroidValidationError{
				field:  "FcmOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FCMAndroidValidationError is the validation error returned by
// FCMAndroid.Validate if the designated constraints aren't met.
type FCMAndroidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMAndroidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMAndroidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMAndroidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMAndroidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMAndroidValidationError) ErrorName() string { return "FCMAndroidValidationError" }

// Error satisfies the builtin error interface
func (e FCMAndroidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMAndroid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMAndroidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMAndroidValidationError{}

// Validate checks the field values on FCMAndroidNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FCMAndroidNotification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Icon

	// no validation rules for Color

	// no validation rules for Sound

	// no validation rules for Tag

	// no validation rules for ClickAction

	// no validation rules for BodyLocKey

	// no validation rules for TitleLocKey

	// no validation rules for ChannelId

	// no validation rules for ImageUrl

	return nil
}

// FCMAndroidNotificationValidationError is the validation error returned by
// FCMAndroidNotification.Validate if the designated constraints aren't met.
type FCMAndroidNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMAndroidNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMAndroidNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMAndroidNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMAndroidNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMAndroidNotificationValidationError) ErrorName() string {
	return "FCMAndroidNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e FCMAndroidNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMAndroidNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMAndroidNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMAndroidNotificationValidationError{}

// Validate checks the field values on FCMAndroidOptions with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FCMAndroidOptions) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AnalyticsLabel

	return nil
}

// FCMAndroidOptionsValidationError is the validation error returned by
// FCMAndroidOptions.Validate if the designated constraints aren't met.
type FCMAndroidOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMAndroidOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMAndroidOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMAndroidOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMAndroidOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMAndroidOptionsValidationError) ErrorName() string {
	return "FCMAndroidOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e FCMAndroidOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMAndroidOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMAndroidOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMAndroidOptionsValidationError{}

// Validate checks the field values on FCMWebpush with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCMWebpush) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FCMWebpushValidationError is the validation error returned by
// FCMWebpush.Validate if the designated constraints aren't met.
type FCMWebpushValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMWebpushValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMWebpushValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMWebpushValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMWebpushValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMWebpushValidationError) ErrorName() string { return "FCMWebpushValidationError" }

// Error satisfies the builtin error interface
func (e FCMWebpushValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMWebpush.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMWebpushValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMWebpushValidationError{}

// Validate checks the field values on FCMAPNS with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCMAPNS) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FCMAPNSValidationError is the validation error returned by FCMAPNS.Validate
// if the designated constraints aren't met.
type FCMAPNSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMAPNSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMAPNSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMAPNSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMAPNSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMAPNSValidationError) ErrorName() string { return "FCMAPNSValidationError" }

// Error satisfies the builtin error interface
func (e FCMAPNSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMAPNS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMAPNSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMAPNSValidationError{}

// Validate checks the field values on FCMOptions with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FCMOptions) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FCMOptionsValidationError is the validation error returned by
// FCMOptions.Validate if the designated constraints aren't met.
type FCMOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FCMOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FCMOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FCMOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FCMOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FCMOptionsValidationError) ErrorName() string { return "FCMOptionsValidationError" }

// Error satisfies the builtin error interface
func (e FCMOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFCMOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FCMOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FCMOptionsValidationError{}
